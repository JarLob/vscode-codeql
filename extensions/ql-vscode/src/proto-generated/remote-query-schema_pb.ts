// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file remote-query-schema.proto (package docs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { RemoteRepositorySchema } from "./remote-repository-schema_pb";

/**
 * @generated from message docs.RemoteQuerySchema
 */
export class RemoteQuerySchema extends Message<RemoteQuerySchema> {
  /**
   * @generated from field: string queryName = 1;
   */
  queryName = "";

  /**
   * @generated from field: string queryFilePath = 2;
   */
  queryFilePath = "";

  /**
   * @generated from field: string queryText = 3;
   */
  queryText = "";

  /**
   * @generated from field: string language = 4;
   */
  language = "";

  /**
   * @generated from field: docs.RemoteRepositorySchema controllerRepository = 5;
   */
  controllerRepository?: RemoteRepositorySchema;

  /**
   * @generated from field: int64 executionStartTime = 6;
   */
  executionStartTime = protoInt64.zero;

  /**
   * @generated from field: int64 actionsWorkflowRunId = 7;
   */
  actionsWorkflowRunId = protoInt64.zero;

  /**
   * @generated from field: double repositoryCount = 8;
   */
  repositoryCount = 0;

  constructor(data?: PartialMessage<RemoteQuerySchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "docs.RemoteQuerySchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queryName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: "queryFilePath",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: "queryText", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: "controllerRepository",
      kind: "message",
      T: RemoteRepositorySchema,
    },
    {
      no: 6,
      name: "executionStartTime",
      kind: "scalar",
      T: 3 /* ScalarType.INT64 */,
    },
    {
      no: 7,
      name: "actionsWorkflowRunId",
      kind: "scalar",
      T: 3 /* ScalarType.INT64 */,
    },
    {
      no: 8,
      name: "repositoryCount",
      kind: "scalar",
      T: 1 /* ScalarType.DOUBLE */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): RemoteQuerySchema {
    return new RemoteQuerySchema().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): RemoteQuerySchema {
    return new RemoteQuerySchema().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RemoteQuerySchema {
    return new RemoteQuerySchema().fromJsonString(jsonString, options);
  }

  static equals(
    a: RemoteQuerySchema | PlainMessage<RemoteQuerySchema> | undefined,
    b: RemoteQuerySchema | PlainMessage<RemoteQuerySchema> | undefined,
  ): boolean {
    return proto3.util.equals(RemoteQuerySchema, a, b);
  }
}
