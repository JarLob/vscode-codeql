// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file variant-analysis-databases-schema.proto (package docs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message docs.VariantAnalysisDatabasesSchema
 */
export class VariantAnalysisDatabasesSchema extends Message<VariantAnalysisDatabasesSchema> {
  /**
   * @generated from field: repeated string repositories = 1;
   */
  repositories: string[] = [];

  /**
   * @generated from field: repeated string repositoryLists = 2;
   */
  repositoryLists: string[] = [];

  /**
   * @generated from field: repeated string repositoryOwners = 3;
   */
  repositoryOwners: string[] = [];

  constructor(data?: PartialMessage<VariantAnalysisDatabasesSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "docs.VariantAnalysisDatabasesSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "repositories",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 2,
      name: "repositoryLists",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 3,
      name: "repositoryOwners",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): VariantAnalysisDatabasesSchema {
    return new VariantAnalysisDatabasesSchema().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): VariantAnalysisDatabasesSchema {
    return new VariantAnalysisDatabasesSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): VariantAnalysisDatabasesSchema {
    return new VariantAnalysisDatabasesSchema().fromJsonString(
      jsonString,
      options,
    );
  }

  static equals(
    a:
      | VariantAnalysisDatabasesSchema
      | PlainMessage<VariantAnalysisDatabasesSchema>
      | undefined,
    b:
      | VariantAnalysisDatabasesSchema
      | PlainMessage<VariantAnalysisDatabasesSchema>
      | undefined,
  ): boolean {
    return proto3.util.equals(VariantAnalysisDatabasesSchema, a, b);
  }
}
