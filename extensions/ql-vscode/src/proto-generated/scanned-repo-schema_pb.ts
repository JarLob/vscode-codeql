// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file scanned-repo-schema.proto (package docs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { RepositoryWithMetadataSchema } from "./repository-with-metadata-schema_pb";

/**
 * @generated from message docs.ScannedRepoSchema
 */
export class ScannedRepoSchema extends Message<ScannedRepoSchema> {
  /**
   * @generated from field: docs.RepositoryWithMetadataSchema repository = 1;
   */
  repository?: RepositoryWithMetadataSchema;

  /**
   * @generated from field: string analysisStatus = 2;
   */
  analysisStatus = "";

  /**
   * @generated from field: optional double resultCount = 3;
   */
  resultCount?: number;

  /**
   * @generated from field: optional double artifactSizeInBytes = 4;
   */
  artifactSizeInBytes?: number;

  /**
   * @generated from field: optional string failureMessage = 5;
   */
  failureMessage?: string;

  constructor(data?: PartialMessage<ScannedRepoSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "docs.ScannedRepoSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository", kind: "message", T: RepositoryWithMetadataSchema },
    { no: 2, name: "analysisStatus", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resultCount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "artifactSizeInBytes", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: "failureMessage", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScannedRepoSchema {
    return new ScannedRepoSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScannedRepoSchema {
    return new ScannedRepoSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScannedRepoSchema {
    return new ScannedRepoSchema().fromJsonString(jsonString, options);
  }

  static equals(a: ScannedRepoSchema | PlainMessage<ScannedRepoSchema> | undefined, b: ScannedRepoSchema | PlainMessage<ScannedRepoSchema> | undefined): boolean {
    return proto3.util.equals(ScannedRepoSchema, a, b);
  }
}

